stages:
  - pre-build
  - pre-build-test
  - build
  - deploy
  - selenium
  - cleanup

variables:
  DOMAIN_NAME: oecloud.local
  PERF_DOMAIN_NAME: oecloud.perf
  REGISTRY: registry.${DOMAIN_NAME}
  EXECUTOR_IMAGE: oecloud-executor:12.x
  EXECUTOR_IMAGE_ORACLE: debian-node-oracle-docker:12.x
  APP_RESPONSE_CODE: "200"
  APP_URL_SUFFIX: .${DOMAIN_NAME}
  MONGO_IMAGE: registry.${DOMAIN_NAME}/alpine-mongo:latest

image: ${REGISTRY}/${EXECUTOR_IMAGE}

before_script:
  - export project=${CI_PROJECT_NAME//[^[:alnum:]]/}
  - export group=${CI_PROJECT_NAMESPACE//[^[:alnum:]]/}
  - export branch=${CI_BUILD_REF_NAME//[^[:alnum:]]/}
  - if [ $branch == "master" ]; then export APP_IMAGE_NAME=$project; else export APP_IMAGE_NAME=$branch"-"$project; fi
  - if [ $group == "oecloudio" ]; then export APP_IMAGE_NAME=$APP_IMAGE_NAME; else export APP_IMAGE_NAME=$group"-"$APP_IMAGE_NAME; fi
  - if [ $branch == "master" ]; then export TAG=latest; else export TAG=${CI_BUILD_REF_NAME}; fi
  - export APP_IMAGE_NAME=$(echo $APP_IMAGE_NAME | tr '[:upper:]' '[:lower:]')

  ## Set deployment names
  - export STACK_NAME=${APP_IMAGE_NAME}
  - export K8S_DEPLOY_NAME=${APP_IMAGE_NAME}
  - export OPENSHIFT_PROJECT_NAME=${APP_IMAGE_NAME}

  ## Set npm related configuration
  - npm config set unsafe-perm true
  - npm config set progress false
  - npm config set registry ${NPM_REGISTRY}

npminstall:
  stage: pre-build
  script:
    - echo "Performing code style check..."
    - export status_eslint=0
    - export status_vulnerabilities=0
    - export exit_status=0
    - time npm install eslint babel-eslint --no-optional
    - if npm run lint; then status_eslint=0; else status_eslint=1; fi
    - if [ ${status_eslint} == 1 ]; then exit_status=1 && echo "esLint errors exist"; fi
    # - if [ ${exit_status} == 1 ]; then exit $exit_status; fi
    - echo "Code style check done successfully"
    - time npm install --no-optional
    - echo "Node Modules Installed"
    - npm config rm registry
    - if npm audit; then export status_vulnerabilities=0; else export status_vulnerabilities=1; fi
    - cd client
    - if npm audit; then export status_vulnerabilities=${status_vulnerabilities}; else export status_vulnerabilities=1; fi
    # - if [ ${status_vulnerabilities} == 1 ]; then export exit_status=1; echo "Dependency vulnerabilities exist"; fi
    # - if [ ${exit_status} == 1 ]; then exit $exit_status; fi
  artifacts:
    expire_in: 2h
    paths:
      - node_modules/
      - client/node_modules/
  except:
    - tags
  tags:
    - CEP_RUNNER

.mongotest:
  stage: pre-build-test
  script:
    - echo 'Performing MongoDB Test'
    - export NODE_ENV=mongo
    - export MONGO_HOST="10.73.53.144"
    - export DB=mongo
    - export DB_NAME=${CI_JOB_ID}_mongo
    - time npm install --no-optional
    - node server/migrate.js
    - npm run grunt-cover
  artifacts:
    expire_in: 2h
    paths:
      - coverage/
  except:
    - tags
  tags:
    - CEP_RUNNER

.postgrestest:
  stage: pre-build-test
  script:
    - echo 'Performing PostgreSQL Test'
    - export NODE_ENV=postgres
    - export DB=postgres
    - export POSTGRES_HOST="10.73.53.144"
    - export MONGO_HOST="10.73.53.144"
    - export DB_NAME=${CI_JOB_ID}_pg
    - export ENABLE_DS_AUTOUPDATE=true
    - npm config set registry ${NPM_REGISTRY}
    - time npm install --no-optional
    - node server/migrate.js
    - npm run grunt-cover
  tags:
    - CEP_RUNNER

.oracletest:
  stage: pre-build-test
  image: ${REGISTRY}/${EXECUTOR_IMAGE_ORACLE}
  allow_failure: true
  script:
    - echo 'Performing Oracle Test'
    - export APP_TAG=oracle
    - export NODE_ENV=oracle
    - export ORACLE_HOST=10.73.53.144
    - export MONGO_HOST="10.73.53.144"
    - export ORACLE_SYSUSER=oeadmin
    - export ORACLE_SYSPASSWORD=oeadmin
    - export ORACLE_SID=ORCLCDB
    - export DB_NAME=${CI_JOB_ID}_mongo
    - npm config set registry ${NPM_REGISTRY}
    - time npm install git+http://evgit/oecloud.io/oe-connector-oracle.git --no-optional
    - time npm install --no-optional
    - mv /oracledb node_modules/
    - export CI_PROJECT_NAMESPACE=${group}
    - node oracle-utility.js
    - export ORACLE_USERNAME=${CI_PROJECT_NAMESPACE}"-"${CI_PROJECT_NAME}
    - export ORACLE_USERNAME=$(echo $ORACLE_USERNAME | tr '[:lower:]' '[:upper:]')
    - export ORACLE_PASSWORD=$(echo $CI_PROJECT_NAMESPACE | tr '[:upper:]' '[:lower:]')
    - export ENABLE_DS_AUTOUPDATE=true
    - echo "Oracle user details:"${ORACLE_USERNAME}"/"${ORACLE_PASSWORD}
    - node server/migrate.js
    - npm run grunt-cover
  tags:
    - CEP_RUNNER

buildjob:
  stage: build
  script:
    # - docker login ${IMAGE_REGISTRY} -u ${REGISTRY_USERNAME} -p ${REGISTRY_PASSWORD}
    - docker stack rm ${STACK_NAME} || echo "Stack removal failed"
    - echo "Building Image"
    - time npm install --no-optional
    - npm run bundle
    - export BASE_IMAGE=${REGISTRY}/alpine-node:12-alpine
    - export FULL_IMAGE_NAME=${REGISTRY}/${APP_IMAGE_NAME}:${TAG}
    - sed 's|\${BASE_IMAGE}|'"${BASE_IMAGE}"'|g' deploy/docker/Dockerfile.tmp > Dockerfile
    - docker image rm ${FULL_IMAGE_NAME} || echo "Image deletion failed"
    - docker image build -t ${FULL_IMAGE_NAME} .
    - docker image push ${FULL_IMAGE_NAME}
    - docker image rm ${FULL_IMAGE_NAME} || echo "Image deletion failed"
  tags:
    - CEP_RUNNER

swarm-deployjob:
  stage: deploy
  script: 
    - export NETWORK_NAME=${STACK_NAME}
    - export NODE_ENV=mongo
    - export MONGO_HOST=${STACK_NAME}_mongo
    - export networkAvailable=$(docker network ls -q --filter name=${NETWORK_NAME} | wc -l)
    - if [ $networkAvailable -eq 0 ]; then docker network create --driver overlay ${NETWORK_NAME}; fi
    - sed 's/\${NETWORK_NAME}/'"${NETWORK_NAME}"'/g' deploy/docker/docker-compose.tmp.yml > docker-compose.yml
    - export FULL_IMAGE_NAME=${REGISTRY}/${APP_IMAGE_NAME}:${TAG}
    - export APP_URL=${STACK_NAME}${APP_URL_SUFFIX}
    - docker stack deploy -c docker-compose.yml ${STACK_NAME}
    - sleep 15
    - docker stack services ${STACK_NAME}
    - export isStarted=$(curl -k --write-out %{http_code} --output curl.out --silent https://${APP_URL}/)
    - export countElapsed=0
    - export app_exit_status=0
    - while [ ${isStarted} -ne ${APP_RESPONSE_CODE} ]; do sleep 10; let countElapsed=countElapsed+1; echo ""; echo -n "Waiting till the URL is up..."; export isStarted=$(curl -k --write-out %{http_code} --output curl.out --silent https://${APP_URL}/); echo ${isStarted}; if [ $countElapsed -eq 18 ] ; then export app_exit_status=1; export isStarted=${APP_RESPONSE_CODE}; fi; done
    - if [ $app_exit_status -eq 1 ]; then echo "App failed to start....."; docker stack ps ${STACK_NAME} --no-trunc; docker service logs ${STACK_NAME}_web; else echo "Your application URL is accessible @ https://${APP_URL}/"; fi
    - exit $app_exit_status
  environment:
    name: staging/${CI_BUILD_REF_NAME}
    url: https://${APP_URL}/
  except:
    - tags
  tags:
    - CEP_RUNNER

.seleniumjob:
  stage: selenium
  allow_failure: true
  before_script:
    - powershell.exe -command "get-app-url.ps1" > tmp.txt
    - set /p APP_URL= < tmp.txt
  dependencies: []
  script:
    - call npm install --no-optional
    - call npm run selenium-test
  tags:
    - SELENIUM_RUNNER

lastcleanup:
  stage: cleanup
  script:
    - docker stack rm ${STACK_NAME}
  when: manual
  tags:
    - CEP_RUNNER
